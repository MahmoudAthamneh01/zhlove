// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String    @unique
  password      String?
  bio           String?
  rank          String    @default("Recruit")
  points        Int       @default(0)
  wins          Int       @default(0)
  losses        Int       @default(0)
  xp            Int       @default(0)
  level         Int       @default(1)
  status        String    @default("offline") // online, offline, away
  lastSeen      DateTime  @default(now())
  joinedAt      DateTime  @default(now())
  isAdmin       Boolean   @default(false)
  isModerator   Boolean   @default(false)
  isVerified    Boolean   @default(false)

  // Relations
  accounts               Account[]
  sessions               Session[]
  clanMember             ClanMember?
  ownedClans             Clan[]                  @relation("ClanOwner")
  forumPosts             ForumPost[]
  forumComments          ForumComment[]
  postLikes              PostLike[]
  sentMessages           Message[]               @relation("MessageSender")
  receivedMessages       Message[]               @relation("MessageReceiver")
  tournamentParticipants TournamentParticipant[]
  organizedTournaments   Tournament[]            @relation("TournamentOrganizer")
  challengeParticipants  ChallengeParticipant[]
  badges                 UserBadge[]
  supportTickets         SupportTicket[]
  replays                Replay[]
  matchReports           MatchReport[]
  notifications          Notification[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Clan {
  id           String   @id @default(cuid())
  name         String   @unique
  tag          String   @unique
  description  String?
  logo         String?
  points       Int      @default(0)
  wins         Int      @default(0)
  losses       Int      @default(0)
  foundedAt    DateTime @default(now())
  isRecruiting Boolean  @default(true)
  maxMembers   Int      @default(4)

  ownerId String
  owner   User   @relation("ClanOwner", fields: [ownerId], references: [id])

  members ClanMember[]
  wars1   ClanWar[]    @relation("ClanWarClan1")
  wars2   ClanWar[]    @relation("ClanWarClan2")

  @@map("clans")
}

model ClanMember {
  id       String   @id @default(cuid())
  userId   String   @unique
  clanId   String
  role     String   @default("member") // owner, leader, member
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  clan Clan @relation(fields: [clanId], references: [id], onDelete: Cascade)

  @@map("clan_members")
}

model ClanWar {
  id            String    @id @default(cuid())
  clan1Id       String
  clan2Id       String
  status        String    @default("pending") // pending, active, completed, cancelled
  winnerId      String?
  loserId       String?
  pointsAwarded Int?
  scheduledAt   DateTime
  completedAt   DateTime?
  createdAt     DateTime  @default(now())

  clan1 Clan @relation("ClanWarClan1", fields: [clan1Id], references: [id])
  clan2 Clan @relation("ClanWarClan2", fields: [clan2Id], references: [id])

  @@map("clan_wars")
}

model Tournament {
  id                   String    @id @default(cuid())
  title                String
  description          String?
  type                 String // 1v1, 2v2, 4v4, FFA
  format               String? // single elimination, double elimination, round robin
  maxParticipants      Int
  prizePool            Decimal?
  prizeDescription     String?
  entryFee             Decimal   @default(0)
  status               String    @default("upcoming") // upcoming, registration, active, completed, cancelled
  startDate            DateTime
  endDate              DateTime?
  registrationDeadline DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  rules           String?
  requirements    String?
  mapPool         String? // JSON array of map names
  isPublic        Boolean @default(true)
  allowSpectators Boolean @default(true)
  streamUrl       String?
  bracketUrl      String?

  organizerId  String
  organizer    User                    @relation("TournamentOrganizer", fields: [organizerId], references: [id], onDelete: Cascade)
  participants TournamentParticipant[]

  @@map("tournaments")
}

model TournamentParticipant {
  id           String   @id @default(cuid())
  userId       String
  tournamentId String
  registeredAt DateTime @default(now())
  status       String   @default("registered") // registered, eliminated, winner

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@unique([userId, tournamentId])
  @@map("tournament_participants")
}

model Challenge {
  id          String    @id @default(cuid())
  title       String
  description String?
  type        String // 1v1, 2v2, etc
  prize       String?
  status      String    @default("pending") // pending, approved, active, completed, cancelled
  createdAt   DateTime  @default(now())
  scheduledAt DateTime?
  completedAt DateTime?

  participants ChallengeParticipant[]

  @@map("challenges")
}

model ChallengeParticipant {
  id          String @id @default(cuid())
  userId      String
  challengeId String
  status      String @default("pending") // pending, accepted, declined

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@map("challenge_participants")
}

model ForumPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  category  String   @default("general") // general, strategy, tournaments, technical
  isPinned  Boolean  @default(false)
  isLocked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments ForumComment[]
  likes    PostLike[]

  @@map("forum_posts")
}

model ForumComment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  authorId  String
  parentId  String? // For nested comments
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post    ForumPost      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author  User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent  ForumComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies ForumComment[] @relation("CommentReplies")

  @@map("forum_comments")
}

model PostLike {
  id     String @id @default(cuid())
  userId String
  postId String

  user User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("post_likes")
}

model Message {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  receiverId String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  sender   User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Badge {
  id          String @id @default(cuid())
  name        String @unique
  description String
  icon        String
  category    String // tournament, forum, ranking, special

  userBadges UserBadge[]

  @@map("badges")
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@map("user_badges")
}

model Replay {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileName    String
  fileSize    Int
  uploaderId  String
  category    String   @default("general") // tournament, highlight, educational
  likes       Int      @default(0)
  downloads   Int      @default(0)
  createdAt   DateTime @default(now())

  uploader User @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  @@map("replays")
}

model Streamer {
  id             String  @id @default(cuid())
  name           String
  youtubeChannel String  @unique
  channelId      String  @unique
  subscribers    Int     @default(0)
  isActive       Boolean @default(true)

  @@map("streamers")
}

model SupportTicket {
  id         String    @id @default(cuid())
  subject    String
  message    String
  category   String // technical, gameplay, account, bug, feature, other
  status     String    @default("open") // open, in_progress, resolved, closed
  priority   String    @default("medium") // low, medium, high, urgent
  userId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  resolvedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("support_tickets")
}

model MatchReport {
  id         String   @id @default(cuid())
  reporterId String
  opponentId String?
  clanWarId  String?
  result     String // win, loss, draw
  points     Int      @default(0)
  map        String?
  duration   Int? // in minutes
  createdAt  DateTime @default(now())
  isVerified Boolean  @default(false)

  reporter User @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("match_reports")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String // clan_invite, tournament, challenge, message, system
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
