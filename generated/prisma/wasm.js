
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  username: 'username',
  password: 'password',
  bio: 'bio',
  rank: 'rank',
  points: 'points',
  wins: 'wins',
  losses: 'losses',
  xp: 'xp',
  level: 'level',
  status: 'status',
  lastSeen: 'lastSeen',
  joinedAt: 'joinedAt',
  isAdmin: 'isAdmin',
  isModerator: 'isModerator',
  isVerified: 'isVerified'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.ClanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  tag: 'tag',
  description: 'description',
  logo: 'logo',
  points: 'points',
  wins: 'wins',
  losses: 'losses',
  foundedAt: 'foundedAt',
  isRecruiting: 'isRecruiting',
  maxMembers: 'maxMembers',
  ownerId: 'ownerId'
};

exports.Prisma.ClanMemberScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  clanId: 'clanId',
  role: 'role',
  joinedAt: 'joinedAt'
};

exports.Prisma.ClanWarScalarFieldEnum = {
  id: 'id',
  clan1Id: 'clan1Id',
  clan2Id: 'clan2Id',
  status: 'status',
  winnerId: 'winnerId',
  loserId: 'loserId',
  pointsAwarded: 'pointsAwarded',
  scheduledAt: 'scheduledAt',
  completedAt: 'completedAt',
  createdAt: 'createdAt'
};

exports.Prisma.TournamentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  format: 'format',
  maxParticipants: 'maxParticipants',
  prizePool: 'prizePool',
  prizeDescription: 'prizeDescription',
  entryFee: 'entryFee',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  registrationDeadline: 'registrationDeadline',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  rules: 'rules',
  requirements: 'requirements',
  mapPool: 'mapPool',
  isPublic: 'isPublic',
  allowSpectators: 'allowSpectators',
  streamUrl: 'streamUrl',
  bracketUrl: 'bracketUrl',
  organizerId: 'organizerId'
};

exports.Prisma.TournamentParticipantScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tournamentId: 'tournamentId',
  registeredAt: 'registeredAt',
  status: 'status'
};

exports.Prisma.ChallengeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  prize: 'prize',
  status: 'status',
  createdAt: 'createdAt',
  scheduledAt: 'scheduledAt',
  completedAt: 'completedAt'
};

exports.Prisma.ChallengeParticipantScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  challengeId: 'challengeId',
  status: 'status'
};

exports.Prisma.ForumPostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  authorId: 'authorId',
  category: 'category',
  isPinned: 'isPinned',
  isLocked: 'isLocked',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumCommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  postId: 'postId',
  authorId: 'authorId',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PostLikeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  postId: 'postId'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  senderId: 'senderId',
  receiverId: 'receiverId',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.BadgeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  category: 'category'
};

exports.Prisma.UserBadgeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  badgeId: 'badgeId',
  earnedAt: 'earnedAt'
};

exports.Prisma.ReplayScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  fileName: 'fileName',
  fileSize: 'fileSize',
  uploaderId: 'uploaderId',
  category: 'category',
  likes: 'likes',
  downloads: 'downloads',
  createdAt: 'createdAt'
};

exports.Prisma.StreamerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  youtubeChannel: 'youtubeChannel',
  channelId: 'channelId',
  subscribers: 'subscribers',
  isActive: 'isActive'
};

exports.Prisma.SupportTicketScalarFieldEnum = {
  id: 'id',
  subject: 'subject',
  message: 'message',
  category: 'category',
  status: 'status',
  priority: 'priority',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.MatchReportScalarFieldEnum = {
  id: 'id',
  reporterId: 'reporterId',
  opponentId: 'opponentId',
  clanWarId: 'clanWarId',
  result: 'result',
  points: 'points',
  map: 'map',
  duration: 'duration',
  createdAt: 'createdAt',
  isVerified: 'isVerified'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Account: 'Account',
  Session: 'Session',
  User: 'User',
  VerificationToken: 'VerificationToken',
  Clan: 'Clan',
  ClanMember: 'ClanMember',
  ClanWar: 'ClanWar',
  Tournament: 'Tournament',
  TournamentParticipant: 'TournamentParticipant',
  Challenge: 'Challenge',
  ChallengeParticipant: 'ChallengeParticipant',
  ForumPost: 'ForumPost',
  ForumComment: 'ForumComment',
  PostLike: 'PostLike',
  Message: 'Message',
  Badge: 'Badge',
  UserBadge: 'UserBadge',
  Replay: 'Replay',
  Streamer: 'Streamer',
  SupportTicket: 'SupportTicket',
  MatchReport: 'MatchReport',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
